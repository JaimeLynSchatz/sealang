import Control.Monad.Instances
import Data.List
import Data.Char
import Data.Maybe
import Text.Printf
import System.Environment
import Text.Regex.Posix
 
 
io f = interact (unlines . f . lines)
 
showln  = (++ "\n") . show
 
regexBool r l = l =~ r :: Bool  
 
 
uniq    = nub    
                 
 
 
rpt     = cycle
 
 
take'   = take 10
 
 
drop'   = drop 10
 
 
head'   = head
 
 
tail'   = last
 
 
tail10  = drop =<< subtract 10 . length
 
 
tac     = reverse
 
 
rev     = map reverse
 
 
rev_w   = map (unwords . reverse . words)
 
 
wc_c    = showln . length
 
 
wc_l    = showln . length . lines
 
 
wc_w    = showln . length . words
 
 
space   = intersperse ""
 
 
unspace = filter (not.null)
 
 
remove  = delete
 
 
upper   = map toUpper
 
 
clean   = map (dropWhile isSpace)
 
 
clean'  = map (reverse . dropWhile isSpace . reverse)
 
 
clean'' = map (f . f)
    where f = reverse . dropWhile isSpace
 
 
blank   = map (s ++)
     where s = replicate 8 ' '
 
 
join = return . concat
 
 
tr a b = interact (map f)
    where f c = if c == a then b else c
 
 
tr_d a = tr a ' '
 
 
grep = filter (regexBool "[bf]oo")
 
 
grep_v  = filter (not . regexBool "[bf]oo")
 
 
num  = zipWith (printf "%3d %s") [(1::Int)..]
 
 
cksum   =  foldl' k 5381
   where k h c = h * 33 + ord c
 
 
main = do
    who <- getProgName
    maybe (return ()) id $ lookup who $
        [("blank",       io blank                  )
        ,("cksum",       interact (showln . cksum) )
        ,("clean",       io clean''                )
        ,("echo" ,       interact id               )
        ,("drop",        interact drop'            )
        ,("grep",        io grep                   )
        ,("grep -v",     io grep_v                 )
        ,("head",        io (return . head')       )
        ,("join",        io join                   )
        ,("num",         io num                    )
        ,("remove",      io (remove "str")         )
        ,("revw",        io rev_w                  )
        ,("reverse",     io rev                    )
        ,("reverseword", io rev_w                  )
        ,("rpt",         io rpt                    )
        ,("sort",        interact sort             )
        ,("space",       io space                  )
        ,("tac",         interact tac              )
        ,("take",        io take'                  )
        ,("tail",        io (return . tail')       )
     
     
        ,("unspace",     io unspace                )
        ,("upper",       interact upper            )
        ,("uniq",        interact uniq             )
        ,("wc_c",        interact wc_c             )
        ,("wc_l",        interact wc_l             )
        ,("wc_w",        interact wc_w             )
        ]

{-# LANGUAGE CPP, NoImplicitPrelude, MagicHash #-}

 
 
 
 
 
 
 
 
 
 
 
 
 
 

module Numeric (

         

        showSigned,        

        showIntAtBase,     
        showInt,           
        showHex,           
        showOct,           

        showEFloat,        
        showFFloat,        
        showGFloat,        
        showFloat,         

        floatToDigits,     

         

         
         
         

        readSigned,        

        readInt,           
                           
        readDec,           
        readOct,           
        readHex,           

        readFloat,         

        lexDigits,         

         

        fromRat,           

        ) where

#ifdef __GLASGOW_HASKELL__
import GHC.Base
import GHC.Read
import GHC.Real
import GHC.Float
import GHC.Num
import GHC.Show
import Data.Maybe
import Text.ParserCombinators.ReadP( ReadP, readP_to_S, pfail )
import qualified Text.Read.Lex as L
#else
import Data.Char
#endif

#ifdef __HUGS__
import Hugs.Prelude
import Hugs.Numeric
#endif

#ifdef __GLASGOW_HASKELL__
 
 

 
readInt :: Num a
  => a                   
  -> (Char -> Bool)      
  -> (Char -> Int)       
  -> ReadS a
readInt base isDigit valDigit = readP_to_S (L.readIntP base isDigit valDigit)

 
readOct :: Num a => ReadS a
readOct = readP_to_S L.readOctP

 
readDec :: Num a => ReadS a
readDec = readP_to_S L.readDecP

 
 
readHex :: Num a => ReadS a
readHex = readP_to_S L.readHexP 

 
 
readFloat :: RealFrac a => ReadS a
readFloat = readP_to_S readFloatP

readFloatP :: RealFrac a => ReadP a
readFloatP =
  do tok <- L.lex
     case tok of
       L.Rat y  -> return (fromRational y)
       L.Int i  -> return (fromInteger i)
       _        -> pfail

 
 
 

 
readSigned :: (Real a) => ReadS a -> ReadS a
readSigned readPos = readParen False read'
                     where read' r  = read'' r ++
                                      (do
                                        ("-",s) <- lex r
                                        (x,t)   <- read'' s
                                        return (-x,t))
                           read'' r = do
                               (str,s) <- lex r
                               (n,"")  <- readPos str
                               return (n,s)

 
 

 
showInt :: Integral a => a -> ShowS
showInt n0 cs0
    | n0 < 0    = error "Numeric.showInt: can't show negative numbers"
    | otherwise = go n0 cs0
    where
    go n cs
        | n < 10    = case unsafeChr (ord '0' + fromIntegral n) of
            c@(C# _) -> c:cs
        | otherwise = case unsafeChr (ord '0' + fromIntegral r) of
            c@(C# _) -> go q (c:cs)
        where
        (q,r) = n `quotRem` 10

 
 
 

{-# SPECIALIZE showEFloat ::
        Maybe Int -> Float  -> ShowS,
        Maybe Int -> Double -> ShowS #-}
{-# SPECIALIZE showFFloat ::
        Maybe Int -> Float  -> ShowS,
        Maybe Int -> Double -> ShowS #-}
{-# SPECIALIZE showGFloat ::
        Maybe Int -> Float  -> ShowS,
        Maybe Int -> Double -> ShowS #-}

 
 
 
 
 
 
showEFloat    :: (RealFloat a) => Maybe Int -> a -> ShowS

 
 
 
 
 
 
showFFloat    :: (RealFloat a) => Maybe Int -> a -> ShowS

 
 
 
 
 
 
 
showGFloat    :: (RealFloat a) => Maybe Int -> a -> ShowS

showEFloat d x =  showString (formatRealFloat FFExponent d x)
showFFloat d x =  showString (formatRealFloat FFFixed d x)
showGFloat d x =  showString (formatRealFloat FFGeneric d x)
#endif  /* __GLASGOW_HASKELL__ */

 
 

 
 
showIntAtBase :: Integral a => a -> (Int -> Char) -> a -> ShowS
showIntAtBase base toChr n0 r0
  | base <= 1 = error ("Numeric.showIntAtBase: applied to unsupported base " ++ show base)
  | n0 <  0   = error ("Numeric.showIntAtBase: applied to negative number " ++ show n0)
  | otherwise = showIt (quotRem n0 base) r0
   where
    showIt (n,d) r = seq c $  
      case n of
        0 -> r'
        _ -> showIt (quotRem n base) r'
     where
      c  = toChr (fromIntegral d)
      r' = c : r

 
showHex :: Integral a => a -> ShowS
showHex = showIntAtBase 16 intToDigit

 
showOct :: Integral a => a -> ShowS
showOct = showIntAtBase 8  intToDigit

{-# LANGUAGE CPP, NoImplicitPrelude, ScopedTypeVariables #-}

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

module Foreign.Storable
        ( Storable(
             sizeOf,          
             alignment,       
             peekElemOff,     
             pokeElemOff,     
             peekByteOff,     
             pokeByteOff,     
             peek,            
             poke)            
        ) where


#ifdef __NHC__
import NHC.FFI (Storable(..),Ptr,FunPtr,StablePtr
               ,Int8,Int16,Int32,Int64,Word8,Word16,Word32,Word64)
#else

import Control.Monad            ( liftM )

#include "MachDeps.h"
#include "HsBaseConfig.h"

#ifdef __GLASGOW_HASKELL__
import GHC.Storable
import GHC.Stable       ( StablePtr )
import GHC.IO()      
import GHC.Num
import GHC.Int
import GHC.Word
import GHC.Ptr
import GHC.Err
import GHC.Base
#else
import Data.Int
import Data.Word
import Foreign.StablePtr
#endif

#ifdef __HUGS__
import Hugs.Prelude
import Hugs.Ptr
import Hugs.Storable
#endif


class Storable a where

   sizeOf      :: a -> Int
    
    

   alignment   :: a -> Int
    
    
    

   peekElemOff :: Ptr a -> Int      -> IO a
    
    
   pokeElemOff :: Ptr a -> Int -> a -> IO ()
    
    

   peekByteOff :: Ptr b -> Int      -> IO a
    
    
    
    

   pokeByteOff :: Ptr b -> Int -> a -> IO ()
    
    
    
    
  
   peek        :: Ptr a      -> IO a
    
    
    
    
    
    
    
    

   poke        :: Ptr a -> a -> IO ()
    
    
 
    
#ifdef __GLASGOW_HASKELL__
   peekElemOff = peekElemOff_ undefined
      where peekElemOff_ :: a -> Ptr a -> Int -> IO a
            peekElemOff_ undef ptr off = peekByteOff ptr (off * sizeOf undef)
#else
   peekElemOff ptr off = peekByteOff ptr (off * sizeOfPtr ptr undefined)
#endif
   pokeElemOff ptr off val = pokeByteOff ptr (off * sizeOf val) val

   peekByteOff ptr off = peek (ptr `plusPtr` off)
   pokeByteOff ptr off = poke (ptr `plusPtr` off)

   peek ptr = peekElemOff ptr 0
   poke ptr = pokeElemOff ptr 0

#ifndef __GLASGOW_HASKELL__
sizeOfPtr :: Storable a => Ptr a -> a -> Int
sizeOfPtr px x = sizeOf x
#endif

 

instance Storable Bool where
   sizeOf _          = sizeOf (undefined::HTYPE_INT)
   alignment _       = alignment (undefined::HTYPE_INT)
   peekElemOff p i   = liftM (/= (0::HTYPE_INT)) $ peekElemOff (castPtr p) i
   pokeElemOff p i x = pokeElemOff (castPtr p) i (if x then 1 else 0::HTYPE_INT)

#define STORABLE(T,size,align,read,write)       \
instance Storable (T) where {                   \
    sizeOf    _ = size;                         \
    alignment _ = align;                        \
    peekElemOff = read;                         \
    pokeElemOff = write }

#ifdef __GLASGOW_HASKELL__
STORABLE(Char,SIZEOF_INT32,ALIGNMENT_INT32,
         readWideCharOffPtr,writeWideCharOffPtr)
#elif defined(__HUGS__)
STORABLE(Char,SIZEOF_HSCHAR,ALIGNMENT_HSCHAR,
         readCharOffPtr,writeCharOffPtr)
#endif

STORABLE(Int,SIZEOF_HSINT,ALIGNMENT_HSINT,
         readIntOffPtr,writeIntOffPtr)

#ifndef __NHC__
STORABLE(Word,SIZEOF_HSWORD,ALIGNMENT_HSWORD,
         readWordOffPtr,writeWordOffPtr)
#endif

STORABLE((Ptr a),SIZEOF_HSPTR,ALIGNMENT_HSPTR,
         readPtrOffPtr,writePtrOffPtr)

STORABLE((FunPtr a),SIZEOF_HSFUNPTR,ALIGNMENT_HSFUNPTR,
         readFunPtrOffPtr,writeFunPtrOffPtr)

STORABLE((StablePtr a),SIZEOF_HSSTABLEPTR,ALIGNMENT_HSSTABLEPTR,
         readStablePtrOffPtr,writeStablePtrOffPtr)

STORABLE(Float,SIZEOF_HSFLOAT,ALIGNMENT_HSFLOAT,
         readFloatOffPtr,writeFloatOffPtr)

STORABLE(Double,SIZEOF_HSDOUBLE,ALIGNMENT_HSDOUBLE,
         readDoubleOffPtr,writeDoubleOffPtr)

STORABLE(Word8,SIZEOF_WORD8,ALIGNMENT_WORD8,
         readWord8OffPtr,writeWord8OffPtr)

STORABLE(Word16,SIZEOF_WORD16,ALIGNMENT_WORD16,
         readWord16OffPtr,writeWord16OffPtr)

STORABLE(Word32,SIZEOF_WORD32,ALIGNMENT_WORD32,
         readWord32OffPtr,writeWord32OffPtr)

STORABLE(Word64,SIZEOF_WORD64,ALIGNMENT_WORD64,
         readWord64OffPtr,writeWord64OffPtr)

STORABLE(Int8,SIZEOF_INT8,ALIGNMENT_INT8,
         readInt8OffPtr,writeInt8OffPtr)

STORABLE(Int16,SIZEOF_INT16,ALIGNMENT_INT16,
         readInt16OffPtr,writeInt16OffPtr)

STORABLE(Int32,SIZEOF_INT32,ALIGNMENT_INT32,
         readInt32OffPtr,writeInt32OffPtr)

STORABLE(Int64,SIZEOF_INT64,ALIGNMENT_INT64,
         readInt64OffPtr,writeInt64OffPtr)

#endif

{-# LANGUAGE CPP, NoImplicitPrelude #-}

 
 
 
 
 
 
 
 
 
 
 
 
 
 


module Foreign.StablePtr
        (  
          StablePtr           
        , newStablePtr        
        , deRefStablePtr      
        , freeStablePtr       
        , castStablePtrToPtr  
        , castPtrToStablePtr  
        ,  

           
        ) where

#ifdef __GLASGOW_HASKELL__
import GHC.Stable
#endif

#ifdef __HUGS__
import Hugs.StablePtr
#endif

#ifdef __NHC__
import NHC.FFI
  ( StablePtr
  , newStablePtr
  , deRefStablePtr
  , freeStablePtr
  , castStablePtrToPtr
  , castPtrToStablePtr
  )
#endif

 
 
 
 
 
 
 
 
 
 
 
 

{-# LANGUAGE CPP
           , NoImplicitPrelude
           , ForeignFunctionInterface
           , MagicHash
           , GeneralizedNewtypeDeriving
  #-}

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

module Foreign.Ptr (

     

    Ptr,       
    nullPtr,       
    castPtr,       
    plusPtr,       
    alignPtr,      
    minusPtr,      

     

    FunPtr,       
    nullFunPtr,       
    castFunPtr,       
    castFunPtrToPtr,  
    castPtrToFunPtr,  

    freeHaskellFunPtr,  
     

#ifndef __NHC__
     
    IntPtr,
    ptrToIntPtr,
    intPtrToPtr,
    WordPtr,
    ptrToWordPtr,
    wordPtrToPtr
#endif
 ) where

#ifdef __GLASGOW_HASKELL__
import GHC.Ptr
import GHC.Base
import GHC.Num
import GHC.Read
import GHC.Real
import GHC.Show
import GHC.Enum
import GHC.Word         ( Word(..) )

 
import Data.Word
#else
import Control.Monad    ( liftM )
import Foreign.C.Types
#endif

import Data.Bits
import Data.Typeable
import Foreign.Storable ( Storable(..) )

#ifdef __NHC__
import NHC.FFI
  ( Ptr
  , nullPtr
  , castPtr
  , plusPtr
  , alignPtr
  , minusPtr
  , FunPtr
  , nullFunPtr
  , castFunPtr
  , castFunPtrToPtr
  , castPtrToFunPtr
  , freeHaskellFunPtr
  )
#endif

#ifdef __HUGS__
import Hugs.Ptr
#endif

#ifdef __GLASGOW_HASKELL__
 
 
 
 
foreign import ccall unsafe "freeHaskellFunctionPtr"
    freeHaskellFunPtr :: FunPtr a -> IO ()
#endif

#ifndef __NHC__
# include "HsBaseConfig.h"
# include "CTypes.h"

# ifdef __GLASGOW_HASKELL__
 
 
 
INTEGRAL_TYPE(WordPtr,tyConWordPtr,"WordPtr",Word)
         

 
 
 
INTEGRAL_TYPE(IntPtr,tyConIntPtr,"IntPtr",Int)
         

 
ptrToWordPtr :: Ptr a -> WordPtr
ptrToWordPtr (Ptr a#) = WordPtr (W# (int2Word# (addr2Int# a#)))

 
wordPtrToPtr :: WordPtr -> Ptr a
wordPtrToPtr (WordPtr (W# w#)) = Ptr (int2Addr# (word2Int# w#))

 
ptrToIntPtr :: Ptr a -> IntPtr
ptrToIntPtr (Ptr a#) = IntPtr (I# (addr2Int# a#))

 
intPtrToPtr :: IntPtr -> Ptr a
intPtrToPtr (IntPtr (I# i#)) = Ptr (int2Addr# i#)

# else /* !__GLASGOW_HASKELL__ */

INTEGRAL_TYPE(WordPtr,tyConWordPtr,"WordPtr",CUIntPtr)
INTEGRAL_TYPE(IntPtr,tyConIntPtr,"IntPtr",CIntPtr)



foreign import ccall unsafe "__hscore_to_uintptr"
    ptrToWordPtr :: Ptr a -> WordPtr

foreign import ccall unsafe "__hscore_from_uintptr"
    wordPtrToPtr :: WordPtr -> Ptr a

foreign import ccall unsafe "__hscore_to_intptr"
    ptrToIntPtr :: Ptr a -> IntPtr

foreign import ccall unsafe "__hscore_from_intptr"
    intPtrToPtr :: IntPtr -> Ptr a

# endif /* !__GLASGOW_HASKELL__ */
#endif /* !__NHC_ */


module Foreign.Marshal
        (
          
          
          module Foreign.Marshal.Alloc
        , module Foreign.Marshal.Array
        , module Foreign.Marshal.Error
        , module Foreign.Marshal.Pool
        , module Foreign.Marshal.Utils
          
        , unsafeLocalState
        ) where

import Foreign.Marshal.Alloc
import Foreign.Marshal.Array
import Foreign.Marshal.Error
import Foreign.Marshal.Pool
import Foreign.Marshal.Utils

#ifdef __GLASGOW_HASKELL__
import GHC.IO
#else
import System.IO.Unsafe
#endif


unsafeLocalState :: IO a -> a
unsafeLocalState = unsafePerformIO



module Foreign.ForeignPtr
        ( 
         
          ForeignPtr
        , FinalizerPtr
#if defined(__HUGS__) || defined(__GLASGOW_HASKELL__)
        , FinalizerEnvPtr
#endif
         
        , newForeignPtr
        , newForeignPtr_
        , addForeignPtrFinalizer
#if defined(__HUGS__) || defined(__GLASGOW_HASKELL__)
        , newForeignPtrEnv
        , addForeignPtrFinalizerEnv
#endif
        , withForeignPtr

#ifdef __GLASGOW_HASKELL__
        , finalizeForeignPtr
#endif

         
        , unsafeForeignPtrToPtr
        , touchForeignPtr
        , castForeignPtr

         
        , mallocForeignPtr
        , mallocForeignPtrBytes
        , mallocForeignPtrArray
        , mallocForeignPtrArray0
        ) 
        where

import Foreign.Ptr

#ifdef __NHC__
import NHC.FFI
  ( ForeignPtr
  , FinalizerPtr
  , newForeignPtr
  , newForeignPtr_
  , addForeignPtrFinalizer
  , withForeignPtr
  , unsafeForeignPtrToPtr
  , touchForeignPtr
  , castForeignPtr
  , Storable(sizeOf)
  , malloc, mallocBytes, finalizerFree
  )
#endif

#ifdef __HUGS__
import Hugs.ForeignPtr
#endif

#ifndef __NHC__
import Foreign.Storable ( Storable(sizeOf) )
#endif

#ifdef __GLASGOW_HASKELL__
import GHC.Base
 
import GHC.Num
import GHC.Err          ( undefined )
import GHC.ForeignPtr
#endif

#if !defined(__NHC__) && !defined(__GLASGOW_HASKELL__)
import Foreign.Marshal.Alloc    ( malloc, mallocBytes, finalizerFree )

instance Eq (ForeignPtr a) where 
    p == q  =  unsafeForeignPtrToPtr p == unsafeForeignPtrToPtr q

instance Ord (ForeignPtr a) where 
    compare p q  =  compare (unsafeForeignPtrToPtr p) (unsafeForeignPtrToPtr q)

instance Show (ForeignPtr a) where
    showsPrec p f = showsPrec p (unsafeForeignPtrToPtr f)
#endif


#ifndef __NHC__
newForeignPtr :: FinalizerPtr a -> Ptr a -> IO (ForeignPtr a)
 
 
 
 
 
newForeignPtr finalizer p
  = do fObj <- newForeignPtr_ p
       addForeignPtrFinalizer finalizer fObj
       return fObj

withForeignPtr :: ForeignPtr a -> (Ptr a -> IO b) -> IO b
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
withForeignPtr fo io
  = do r <- io (unsafeForeignPtrToPtr fo)
       touchForeignPtr fo
       return r
#endif /* ! __NHC__ */

#if defined(__HUGS__) || defined(__GLASGOW_HASKELL__)
 
 
 
 
newForeignPtrEnv ::
    FinalizerEnvPtr env a -> Ptr env -> Ptr a -> IO (ForeignPtr a)
newForeignPtrEnv finalizer env p
  = do fObj <- newForeignPtr_ p
       addForeignPtrFinalizerEnv finalizer env fObj
       return fObj
#endif /* __HUGS__ */

#ifndef __GLASGOW_HASKELL__
mallocForeignPtr :: Storable a => IO (ForeignPtr a)
mallocForeignPtr = do
  r <- malloc
  newForeignPtr finalizerFree r

mallocForeignPtrBytes :: Int -> IO (ForeignPtr a)
mallocForeignPtrBytes n = do
  r <- mallocBytes n
  newForeignPtr finalizerFree r
#endif /* !__GLASGOW_HASKELL__ */

 
 
 
 
mallocForeignPtrArray :: Storable a => Int -> IO (ForeignPtr a)
mallocForeignPtrArray  = doMalloc undefined
  where
    doMalloc            :: Storable b => b -> Int -> IO (ForeignPtr b)
    doMalloc dummy size  = mallocForeignPtrBytes (size * sizeOf dummy)

 
 
 
 
mallocForeignPtrArray0      :: Storable a => Int -> IO (ForeignPtr a)
mallocForeignPtrArray0 size  = mallocForeignPtrArray (size + 1)



module Foreign.Concurrent
  (
         

         
         
         
         
         

        newForeignPtr,
        addForeignPtrFinalizer,
  ) where

#ifdef __GLASGOW_HASKELL__
import GHC.IO           ( IO )
import GHC.Ptr          ( Ptr )
import GHC.ForeignPtr   ( ForeignPtr )
import qualified GHC.ForeignPtr
#endif

#ifdef __GLASGOW_HASKELL__
newForeignPtr :: Ptr a -> IO () -> IO (ForeignPtr a)
 
 
 
 
 
 
newForeignPtr = GHC.ForeignPtr.newConcForeignPtr

addForeignPtrFinalizer :: ForeignPtr a -> IO () -> IO ()
 
 
 
 
addForeignPtrFinalizer = GHC.ForeignPtr.addForeignPtrConcFinalizer
#endif


