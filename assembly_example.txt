Assembly language program which shows the current date
and time in a form identical to that used by Posix ctime()

; showdate.asm
;
; prints the date and time to stdout
; equivalent to the following C++ program:
;
;#include <iostream.h>
;#include <time.h>
;
;int main()
;{
;    time_t t;
;    time(&t);                  // get the current time
;    cout << ctime(&t);         // convert to string and print
;    return 0;
;}
;
; This code may be assembled and linked using Borland's TASM:
;   tasm /la /m2 showdate
;   tlink /Tdc showdate
;
STDOUT                  equ     01h     ; handle of standard output device

DOS_GET_DATE            equ     02ah    ; get system date
DOS_GET_TIME            equ     02ch    ; get system time
DOS_WRITE_HANDLE        equ     040h    ; write to handle
DOS_TERMINATE           equ     04ch    ; terminate with error code

DOSINT macro function, subfunction
        IFB <subfunction>
                mov     ah,(function AND 0ffh)
        ELSE
                mov     ax,(function SHL 8) OR (subfunction AND 0ffh)
        ENDIF
        int     21h                     ; invoke DOS function
endm


MODEL tiny
;.STACK 100h
.CODE

;****************************************************************************
;                                                                      main
;
; calls showdate routne and exists with 00 error code
;
; Entry:
;
; Exit:
;
; Trashed:
;       none
;
;****************************************************************************
main proc far
        .STARTUP                ; sets up DS and stack
        call    showdate        ;
        .EXIT 0                 ; return with errcode=0
main endp

;****************************************************************************
;                                                                  showdate
;
; fetches the DOS system date, prints it to stdout and exits
; the format of the output is identical to that of the Posix ctime()
; function:
;
;      Thu May 11 16:11:30 2000
;
; The day of week and month are always 3 characters long.  The time of
; day is in 24hour form (e.g. 16:11:30 is a few minutes after four in
; the afternoon) and the year is always four digits.  The whole thing is
; followed by a newline character (line feed = 0ah), making 25
; characters total.
;
; Note that ctime() returns 26 characters which is all of the above,
; followed by a terminating NUL char but this program does not emit a
; NUL.)
;
; Entry:
;       DS points to segment for our data tables
;
; Exit:
;       carry may be set if last write failed
;
; Trashed:
;       none
;
;****************************************************************************
showdate proc
        push    ax bx cx dx     ;
        DOSINT  DOS_GET_DATE    ;
; returns the following
;       cx = year (1980-2099)
;       dh = month (1-12) == (Jan..Dec)
;       dl = day (1-31)
;       al = day of week (0-6) == (Sun..Sat)

        push    cx              ;
        push    dx              ; save the return values

        ; write the day of week
        mov     dx, offset dayname  ;
        mov     cx,3            ; number of bytes to write
        call    WriteSubstring  ;

        ; write the month
        pop     ax              ; recall month/day
        push    ax              ; and save it again
        mov     al,ah           ; isolate just month
        mov     dx, offset monthname - 3  ; monthname array is 1-based
        mov     cx,3            ; number of bytes to write
        call    WriteSubstring  ;

        ; write the day of the month
        pop     ax              ;
        call    WriteNumber     ;
        call    WriteSpace      ;

        ; write the hour
        DOSINT  DOS_GET_TIME    ; ch = hour, cl = min,
                                ; dh = sec, dl = hundredths

        push    dx              ; save seconds
        push    cx              ; save minutes
        mov     al,ch           ;
        call    WriteNumber     ;
        call    WriteColon      ;

        ; write the minutes
        pop     ax              ;
        call    WriteNumber     ;
        call    WriteColon      ;

        ; write the seconds
        pop     ax              ;
        mov     al,ah           ;
        call    WriteNumber     ;
        call    WriteSpace      ;

        ; write the year (century first)
        pop     ax              ;
        xor     dx,dx           ; clear other reg before divide
        mov     cx,100          ; ax = ax/100, dx = remainder
        div     cx              ;
        push    dx              ; save remainder
        call    WriteNumber     ;

        ; write the year (year within century)
        pop     ax              ;
        call    WriteNumber     ;
        mov     dx,offset newlinechar
        call    PrintOne        ;
        pop     dx cx bx ax     ; restore stack
        ret                     ;
showdate endp

;****************************************************************************
;                                                            WriteSubstring
;
; writes a short substring to stdout
; specifically, prints CL characters, starting at DS:(DX+CL*AL)
;
; Entry:
;       DS:DX ==> pointer to base of string array
;       CL    =   size of each string
;       AL    =   string selector (i.e. which string)
;
; Exit:
;       CY set if there was an error writing last byte
;       if CY clear,
;               AX = 1 (number of bytes written)
;       else
;               AX = error code
;
; Trashed:
;       BX CX DX
;
;****************************************************************************
WriteSubstring proc
        mul     cl              ; ax = cl * al
        add     dx,ax           ; offset now points to appropriate day string
        call    PrintIt         ;
WriteSubstring endp
        ; deliberately fall through
;****************************************************************************
;                                                                WriteSpace
;
; writes a single space character (20h) to stdout
;
; Entry:
;       DS points to data table segment
;
; Exit:
;       CY set if there was an error writing last byte
;       if CY clear,
;               AX = 1 (number of bytes written)
;       else
;               AX = error code
;
; Trashed:
;       BX CX DX
;
;****************************************************************************
WriteSpace proc
        mov     dx,offset spacechar;
WriteSpace endp
        ; deliberately fall through
;****************************************************************************
;                                                                  PrintOne
;
; prints a single character pointed to by DS:DX
;
; Entry:
;       DS:DX ==> points to the character to be printed
;
; Exit:
;       CY set if there was an error writing last byte
;       if CY clear,
;               AX = 1 (number of bytes written)
;       else
;               AX = error code
;
; Trashed:
;       BX CX DX
;
;****************************************************************************
PrintOne proc
        mov     cx,1            ;
PrintOne endp
        ; deliberately fall through
;****************************************************************************
;                                                                   PrintIt
;
; prints the passed string to stdout
;
; Entry:
;       DS:DX ==> points to string to be printed
;       CX    =   number of bytes to be printed
;
; Exit:
;       CY set if there was an error writing to stdout
;       if CY clear,
;               AX = number of bytes written
;       else
;               AX = error code
;
; Trashed:
;       none
;
;****************************************************************************
PrintIt proc
        mov     bx,STDOUT       ;
        DOSINT  DOS_WRITE_HANDLE  ; write to the file
        ret                     ;
PrintIt endp
              
;****************************************************************************
;                                                                WriteColon
;
; writes a colon character to stdout
;
; Entry:
;       DS points to data segment
;
; Exit:
;       CY set if there was an error writing to stdout
;       if CY clear,
;               AX = 1 (number of bytes written)
;       else
;               AX = error code
;
; Trashed:
;       none
;
;****************************************************************************
WriteColon proc
        mov     dx,offset colonchar;
        jmp     PrintOne        ;
WriteColon endp

;****************************************************************************
;                                                               WriteNumber
;
; prints the number in AL to stdout as two decimal digits
;
; Entry:
;       AL      = number to be printed.  It must be in the range 00-99
;
; Exit:
;       CY set if there was an error writing to stdout
;       if CY clear,
;               AX = 2 (number of bytes written)
;       else
;               AX = error code
;
; Trashed:
;       BX CX DX
;
;****************************************************************************
WriteNumber proc
        xor     ah,ah           ; clear out high half
        mov     cl,10           ; prepare to convert to decimal (base 10)
        div     cl              ; divide it out
        or      ax,3030h        ; convert to ASCII digits
        push    ds              ; remember DS for later
        push    ax              ; push converted chars on stack
        mov     dx,ss           ;
        mov     ds,dx           ; ds = ss
        mov     dx,sp           ; print data from stack
        mov     cx,2            ; two characters only
        call    PrintIt         ;
        pop     bx              ; fix stack
        pop     ds              ; restore ds pointer
        ret                     ;
WriteNumber endp

;.DATA
        dayname         db "SunMonTueWedThuFriSat"
        monthname       db "JanFebMarAprMayJunJulAugSepOctNovDec"
        spacechar       db " "
        colonchar       db ":"
        newlinechar     db 0ah   ; in C this is \n

end

Checks the validity of an ISBN by verifying the checksum

; From  Ed Beroset - ISBN validation
; >  Anyone know how to validate the ISBN numbers from books?

; isbnchek.asm
comment ^

        This file contains a C-callable routine which calculates the
        check digit (tenth digit) of an ISBN and returns the ASCII
        representation of that digit.

        This code was written for Borland's TASM
        and may be assembled with the following command:

                tasm /m2 isbnchek.asm

^
        .MODEL small

        public isbncheck

        .CODE
;/***************************************************************************
;
;   Name:
;       isbncheck
;
;   Purpose:
;       Calculates the check digit for a ten digit ISBN, converts that
;       digit to its ASCII representation and returns that answer.
;
;   Algorithm:
;       An ISBN consists of nine digits plus a validation digit.
;       Number the digits from left to right as d1, d2, ... d9, with
;       d10 being the validation digit.  The calculation is then
;
;       d10 = (1(d1) + 2(d2) + 3(d3) + ... + i(di) + ... + 9(d9))%11
;
;       or the weighted sum of each digit mod eleven.
;
;       In our assembly language implementation, we simulate the
;       multiplications by looping through and summing as in the
;       following psuedocode:
;
;       sum = 0
;       for i=1 to 9
;       {
;           for j=i to 9
;           {
;               sum = sum + isbn[j]
;           }
;       }
;
;   Entry:
;
;      isbn = a nine digit ASCII string containing the ISBN
;             (with or without the check digit which is not used here)
;
;   Register usage within the routine:
;
;        AL = current ISBN digit
;        AH = sum of digits so far
;        BX = start pointer into ISBN for each outer loop
;        CX = digit counter (inner loop)
;        DX = start value for digit counter
;        SI = points to current ISBN digit
;
;   Exit:
;
;        AX = ASCII representation of calculated check digit
;
;   Trashed:
;       none
;
;***************************************************************************/
isbncheck proc C isbn:ptr byte
        push    bx
        push    cx
        push    dx
        push    si
        mov     bx,[isbn]               ;
        mov     dx,9                    ; number of digits in raw ISBN
        xor     ax,ax                   ; clear out our total
        cld                             ; count up
@@bigloop:                              ;
        mov     si,bx                   ; point to a digit in the ISBN
        mov     cx,dx                   ; get digit count in CX
@@AddEmUp:                              ;
        lodsb                           ; fetch digit into AL
        and     al,0fh                  ; convert from ASCII
        add     ah,al                   ; add it to our total in AH
        loop    @@AddEmUp               ; do all digits
        inc     bx                      ; and advance the digit pointer
        dec     dx                      ; now decrement digit count
        jnz     @@bigloop               ;   keep going if digits left
        mov     al,ah                   ; move sum into al
        xor     ah,ah                   ; clear out high half
        mov     cl,11                   ; we'll be doing a mod 11 operation
        div     cl                      ; ah = sum mod 11
        mov     al,ah                   ; move calculated check digit to AL
        xor     ah,ah                   ; clear out high half
        or      al,30h                  ; convert to ASCII digit
        cmp     al,3Ah                  ;
        jnz     NotTen                  ;
        mov     al,'X'                  ;
NotTen:                                 ;
        pop     si
        pop     dx
        pop     cx
        pop     bx
        ret                             ; return
isbncheck endp

        END

Serial communications port interupt intercepter   AHA 8502.27
;
;       Functions:
;       al=0 then Disable communications interupt vector
;       al=1 then Enable communications interupt vector
;       Issue and int 44h
;
progseg segment para public 'CODE'
        public  setcom
        assume  cs:progseg, ds:progseg, es:progseg
        org     100h
doscall equ     21h
;
startup proc    far
        jmp     setup
;
setcom  proc    far
        push    ds
        push    es
        push    dx
        push    ax
        mov     ax,cs
        mov     ds,ax
        mov     es,ax
        pop     ax
        cmp     al,1            ;is function 1
        jz      enable          ;then enable
;
disable:
        mov     dx,offset interupt ;get new vector address
        mov     ax,cs
        mov     ds,ax           ;set segment
        mov     ah,25h          ;set interupt vector address function
        mov     al,14h          ;communications interupt vector
        int     doscall         ;set the interupt
        jmp     exit            ;exit
enable:
        mov     dx,word ptr vector       ;set old segment
        mov     ds,vector+2     ;set old communications vector
        mov     ah,25h          ;set interupt vector address function
        mov     al,14h          ;communications interupt vector
        int     doscall
exit:
        pop     dx
        pop     es
        pop     ds
;
interupt       proc    far
        sub     ax,ax           ;zero return status
        iret
interupt       endp
setcom  endp
;
msg     db      'Serial communications intercepter installed',0ah,0dh,'$'
msg1    db      'Serial communications intercepter is already installed',0ah,0dh,'$'
vector  db      8 dup(0)        ;only 4 needed 4 more for safety
;
setup:
        mov     ah,35h          ;get interupt vector address function
        mov     al,44h          ;communications interupt vector
        int     doscall         ;go get it
        cmp     bx,0            ;check if vector used
        jnz     lderr           ;if used then exit
        mov     ax,es           ;check segment
        cmp     ax,0
        jnz     lderr
;
        mov     dx,offset msg
        mov     ah,9
        int     doscall
;
        mov     ah,35h          ;get interupt vector address function
        mov     al,14h          ;communications interupt vector
        int     doscall         ;go get it
;
        mov     word ptr vector,bx       ;save offset
        mov     bx,es           ;get segment address
        mov     word ptr vector+2,bx     ;save segment
;
        mov     dx,offset setcom ;get new vector address
        mov     ax,cs
        mov     ds,ax           ;set segment
        mov     ah,25h          ;set interupt vector address function
        mov     al,44h          ;set to our new interupt vector
        int     doscall         ;set the interupt
;
        mov     dx,offset setup ;terminate and stay resident
        int     27h
lderr:
        mov     dx,offset msg1
        mov     ah,9
        int     doscall
        int     20h
startup endp
progseg ends
;
        end     startup

BIOS-based disk I-O to access MS-DOS file structure

; rawread.asm
;
; this program reads a DOS cluster using only BIOS disk calls.  All
; of the tasks usually done by DOS, e.g. FAT lookup, cluster to
; logical sector translation, logical to physical translation, are
; all done by this program instead.  The idea is to be able to create
; a program that can access DOS disks from a bootable floppy without
; having to have DOS.
;
; well, that's what it used to do.  Now it's supposed to do something
; completely different.  Its job is to scan the entire surface of the
; hard drive, looking for the specified string.  If that string is
; found, it is to print the full path and directory entry, including
; the file date and time.
;
; but wait!  There's more.  Now what we have is a number of raw
; routines which could prove useful for manipulating a DOS file
; structure outside of the DOS environment.  The main routine still
; should be kept (if renamed), since the order in which these things
; are done is important (e.g. later calls depend on data set up by
; earlier calls).
;
; get filename
; parse filename into subdirs
; locate root dir and cluster size
; follow subdir routing to filename
; report file size, date & time
;
        .MODEL small
        .STACK 0200h
        .586P

        .DATA
PartEntry STRUC
        Bootable        db ?    ;80h = bootable, 00h = nonbootable
        BeginHead       db ?    ;beginning head
        BeginSector     db ?    ;beginning sector
        BeginCylinder   db ?    ;beginning cylinder
        FileSystem      db ?    ;name of file system
        EndHead         db ?    ;ending head
        EndSector       db ?    ;ending sector
        EndCylinder     db ?    ;ending cylinder
        StartSector     dd ?    ;starting sector (relative to beg. of disk)
        PartSectors     dd ?    ;number of sectors in partition
PartEntry ENDS

BootSector STRUC
        Jump            db ?            ;E9 xx xx or EB xx 90
        JumpTarget      dw ?            ;E9 xx xx or EB xx 90
        OemName         db '????????'   ;OEM name & version
                                        ;Start of BIOS parameter block
        BytesPerSec     dw ?            ;bytes per sector
        SecPerClust     db ?            ;sectors per cluster
        ResSectors      dw ?            ;number of reserved sectors
        FATs            db ?            ;number of file allocation tables
        RootDirEnts     dw ?            ;number of root-dir entries
        Sectors         dw ?            ;total number of sectors
        Media           db ?            ;media descriptor byte
        FATsecs         dw ?            ;number of sectors per FAT
        SecPerTrack     dw ?            ;sectors per track
        Heads           dw ?            ;number of heads
        HiddenSecs      dd ?            ;number of hidden sectors
        HugeSectors     dd ?            ;num sectors if Sectors==0
                                        ;End of BIOS parameter block
BootSector ENDS

DirEntry STRUC
        FileName        db '????????'   ;name
        Extension       db '???'        ;extension
        Attributes      db ?            ;attributes
        Reserved        db 10 dup (?)   ;reserved
        Time            dw ?            ;time stamp
        Date            dw ?            ;date stamp
        StartCluster    dw ?            ;starting cluster
        FileSize        dd ?            ;file size
DirEntry ENDS

BootFileName  db  "CONFIG  SYS"         ;the boot loader for this OS
MBR     DB      0200h DUP (?)
buff    DB      0200h * 40h DUP (?)
ClustOffs       dd      ?

CR      EQU     0DH
LF      EQU     0AH


        .CODE
main PROC
        STARTUPCODE                     ;initialize stuff
        call    FetchMBR C              ;fetch the master boot record
        jc      @@exit
        mov     cx,4                    ;search up to four partitions
        add     bx,01aeh                ;point to partition table (-10h)
@@FindBootable:
        add     bx,10h                  ;point to next entry
        cmp     BYTE ptr [bx],80h       ;is it a bootable partition?
        loopnz  @@FindBootable
        call    FetchSector C,                                \
                WORD ptr [(PartEntry PTR bx).BeginHead],      \
                WORD ptr [(PartEntry PTR bx).BeginSector],    \
                WORD ptr [(PartEntry PTR bx).BeginCylinder],  \
                OFFSET MBR, ds ;SEG MBR
;
; here's the point at which our OS loader would begin, with the
; BootSector structure in memory.
;
        mov     bx, OFFSET MBR
        call    CalcClustOff C, \
                WORD ptr [(BootSector PTR bx).ResSectors],    \
                WORD ptr [(BootSector PTR bx).FATsecs],       \
                WORD ptr [(BootSector PTR bx).FATs],          \
                WORD ptr [(BootSector PTR bx).RootDirEnts],   \
                WORD ptr [(BootSector PTR bx).BytesPerSec],   \
                WORD ptr [(BootSector PTR bx).SecPerClust]
        mov     WORD ptr [ClustOffs],ax
        mov     WORD ptr [ClustOffs+2],dx
        call    CalcClust2 C,                                 \
                WORD ptr [(BootSector PTR bx).ResSectors],    \
                WORD ptr [(BootSector PTR bx).FATsecs],       \
                WORD ptr [(BootSector PTR bx).FATs]
        ; now dx:ax contains the logical sector for cluster 2
        call    LsectToGeom C,                                \
                ax, dx,                                       \
                WORD ptr [(BootSector PTR bx).HiddenSecs]  ,  \
                WORD ptr [((BootSector PTR bx).HiddenSecs)+2],\
                [(BootSector PTR bx).Heads],                  \
                [(BootSector PTR bx).SecPerTrack]

        mov     dl,80h
        mov     bx,offset buff
        mov     al,[(BootSector PTR MBR).SecPerClust]
        mov     ah,2h                   ; get ready to read
        int     13h
        ; now find our desired filename within buffer (which has the root dir)

        call    FindFile C, \
                bx, 200h * 40h, offset BootFileName
        xor     dh,dh
        mov     dl,[(BootSector PTR MBR).SecPerClust]
        mov     si,ax
        mov     ax,[(DirEntry PTR si).StartCluster]
        mul     dx
        add     ax,WORD ptr [ClustOffs]
        adc     dx,WORD ptr [ClustOffs+2]
        ; now dx:ax contains logical sector number for start of file

        call    LsectToGeom C, \
                ax, dx, \
                WORD ptr [(BootSector PTR MBR).HiddenSecs]  ,  \
                WORD ptr [((BootSector PTR MBR).HiddenSecs)+2],\
                [(BootSector PTR MBR).Heads],                  \
                [(BootSector PTR MBR).SecPerTrack]
        mov     dl,80h
        mov     ax,204h                 ; read in 2k worth of data
        int     13h

@@exit:
        EXITCODE                        ;exit to DOS
ENDP    main

;
; FetchMBR -    fetches the Master Boot Record from the first physical
;               hard disk and stores it in the location MBR.
;
; INPUT:     none
; OUTPUT:    AX is error code if CY set, ES:BX ==> MBR
; DESTROYED: none
;
FetchMBR PROC    C
        USES    cx, dx                  ;save registers we'll use
        mov     dx,80h                  ;first physical disk
        mov     cx,1                    ;head 1, sector 0
        mov     bx,ds                   ;
        mov     es,bx                   ;point to boot record buffer
        mov     bx,OFFSET MBR           ;read into boot record
        mov     ax,0201h                ;read one sector
        int     13h                     ;BIOS read
        ret                             ;return to main
FetchMBR ENDP

;
; FetchSector - fetches the physical sector described by the passed
;               parameters and stores it in the named buffer
;
; INPUT:     head, sector, cylinder, buffer
; OUTPUT:    AX is error code if CY set, ES:BX ==> Boot
; DESTROYED: none
;
FetchSector PROC C  head:BYTE, sector:BYTE, cylinder:BYTE, buffer:DWORD
        USES    cx, dx                  ;save registers we'll use
        mov     ch, [cylinder]          ;
        mov     cl, [sector]            ;
        mov     dh, [head]              ;
        mov     dl, 80h                 ;first physical hard drive
        les     bx, [buffer]            ;
        mov     ax,0201h                ;read one sector
        int     13h                     ;BIOS read
        ret                             ;return to main
FetchSector ENDP

;
; GeomToLsect - converts to logical sector number from the physical
;               geometry (head, cylinder, track).  See LsectToGeom.
;
; INPUT:     cx, dx are set with cylinder/track, and head respectively
;            HiddenSecs, Heads, SecPerTrack
; OUTPUT:    lsect
; DESTROYED: none
;
GeomToLsect PROC    C lsect:DWORD, dHiddenSecs:DWORD,    \
                      dHeads:WORD, dSecPerTrack:WORD, buffer:DWORD
        USES    ax                      ;save registers we'll use
        mov     ax, WORD ptr [lsect]    ;load lsect into DX:AX
        mov     dx, WORD ptr [lsect+2]  ;
        stc                             ;add one additional
        adc     ax, WORD ptr [dHiddenSecs]   ;add starting sector
        adc     dx, WORD ptr [dHiddenSecs+2] ;
        div     [dSecPerTrack]          ;
        mov     cl,dl                   ;store sector in cl
        xor     dx,dx                   ;
        div     [dHeads]                ;
        mov     dh,dl                   ;store head in dh
        mov     ch,al                   ;store low 8 bits of cylinder in ch
        shr     ax,1                    ;
        shr     ax,1                    ;
        and     al,0c0h                 ;pass through two hi bits only
        or      cl,ah                   ;mov bits into location
        ret                             ;
GeomToLsect ENDP

;
; LsectToGeom - converts from logical sector number to the physical
;               geometry (head, cylinder, track) in the form required
;               by the BIOS (Int 13h) disk read and write calls.
;
; INPUT:     lsect, HiddenSecs, Heads, SecPerTrack
; OUTPUT:    cx, dx are set with cylinder/track, and head respectively
; DESTROYED: none
;
LsectToGeom PROC    C lsect:DWORD, lHiddenSecs:DWORD,    \
                      lHeads:WORD, lSecPerTrack:WORD, buffer:DWORD
        USES    ax                      ;save registers we'll use
        mov     ax, WORD ptr [lsect]    ;load lsect into DX:AX
        mov     dx, WORD ptr [lsect+2]  ;
        stc                             ;add one additional
        adc     ax, WORD ptr [lHiddenSecs]   ;add starting sector
        adc     dx, WORD ptr [lHiddenSecs+2] ;
        div     [lSecPerTrack]          ;
        mov     cl,dl                   ;store sector in cl
        xor     dx,dx                   ;
        div     [lHeads]                ;
        mov     dh,dl                   ;store head in dh
        mov     ch,al                   ;store low 8 bits of cylinder in ch
        shr     ax,1                    ;
        shr     ax,1                    ;
        and     al,0c0h                 ;pass through two hi bits only
        or      cl,ah                   ;mov bits into location
        ret                             ;
LsectToGeom ENDP

;
; CalcClust2  - calculates the starting logical sector number of
;               cluster 2, (the beginning of data space for
;               partitions).
;
; INPUT:     ResSectors, FATsecs, FATs
; OUTPUT:    dx:ax contains the starting logical sector number
; DESTROYED: none
;
CalcClust2 PROC    C cResSectors:WORD, cFATsecs:WORD, cFATs:BYTE
        xor     dx,dx                   ;
        mov     ax,[cFATsecs]           ;
        mul     [cFATs]                 ;
        add     ax,[cResSectors]        ;
        adc     dx,0                    ;
        ret
CalcClust2 ENDP

;
; CalcClustOff - calculates the starting logical sector number of
;               cluster 0, which isn't really a cluster, but the
;               number returned is useful for calculations converting
;               cluster number to logical sector
;
; INPUT:     ResSectors, FATsecs, FATs
; OUTPUT:    dx:ax contains the starting logical sector number
; DESTROYED: none
;
CalcClustOff PROC    C dResSectors:WORD, dFATsecs:WORD, dFATs:BYTE, \
        dRootDirEnts:WORD, dBytesPerSec:WORD, dSecPerClust:BYTE
        LOCAL clustLo:WORD, clustHi:WORD
        xor     dh,dh
        mov     ax,[dFatSecs]
        mov     dl,[dFATs]
        mul     dx
        add     ax,[dResSectors]
        adc     dx,0
;        call    CalcClust2 C, [dResSectors], [dFATsecs], [dFATs]
        ; now dx:ax = FATs * FATsecs + ResSectors
        mov     [clustLo],ax
        mov     [clustHi],dx
        mov     dx,20h                  ; bytes per dir entry
        mov     ax,[dRootDirEnts]       ;
        mul     dx                      ; multiply 'em out
        div     [dBytesPerSec]          ; and divide by bytes/sec
        add     [clustLo],ax            ;
        adc     [clustHi],dx            ; create the aggregate
        mov     al,[dSecPerClust]       ;
        xor     ah,ah                   ;
        shl     ax,1                    ; AX = SecPerClust * 2
        sub     [clustLo],ax            ;
        sbb     [clustHi],0             ; propagate carry flag
        mov     ax,[clustLo]            ;
        mov     dx,[clustHi]            ;
        ret
CalcClustOff ENDP

;
; FindFile -    given a memory buffer containing the directory data
;               and a static file name for which to search, this routine
;               finds the file and returns a pointer to its directory
;               entry in ds:si
;
; INPUT:        dirbuffer, filespec
; OUTPUT:       ax    contains pointer to directory entry (or NULL)
; DESTROYED:    none
;
FindFile PROC C dirbuffer:WORD, limit:WORD, filespec:WORD
        USES    cx, dx, di, si, es
        mov     cx,ds                   ;
        mov     es,cx                   ; es and ds point to same segment
        cld                             ; always count forward
        mov     ax,[dirbuffer]          ; load 'em up
        add     [limit],ax
        mov     dx,[filespec]           ;
keepsearching:
        mov     cx,11                   ; size of dos filename (8.3)
        mov     si,dx                   ;
        mov     di,ax                   ;
        repe    cmpsb                   ; compare 'em
        jz      foundit                 ;
        add     ax,20h                  ; size of directory entry
        cmp     ax,[limit]
        jb      keepsearching
        xor     ax,ax

foundit:
        ret
FindFile ENDP
        END
